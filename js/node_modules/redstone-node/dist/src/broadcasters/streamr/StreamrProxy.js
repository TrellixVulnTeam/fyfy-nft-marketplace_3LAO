"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamrProxy = void 0;
var streamr_client_1 = require("streamr-client");
var logger = require("../../utils/logger")("StreamrProxy");
var StreamrProxy = /** @class */ (function () {
    function StreamrProxy(ethPrivateKey) {
        this.streamrClient = new streamr_client_1.StreamrClient({
            auth: { privateKey: ethPrivateKey },
        });
    }
    // Returns stream id of the created (or previously created) stream
    StreamrProxy.prototype.tryCreateStream = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var streamId, streamExists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getStreamIdForStreamName(name)];
                    case 1:
                        streamId = _a.sent();
                        return [4 /*yield*/, this.doesStreamExist(streamId)];
                    case 2:
                        streamExists = _a.sent();
                        if (!streamExists) return [3 /*break*/, 3];
                        logger.info("Streamr stream already exists: ".concat(streamId));
                        return [2 /*return*/, streamId];
                    case 3: return [4 /*yield*/, this.createStream(streamId)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StreamrProxy.prototype.publishToStreamByName = function (data, streamName) {
        return __awaiter(this, void 0, void 0, function () {
            var streamId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getStreamIdForStreamName(streamName)];
                    case 1:
                        streamId = _a.sent();
                        return [4 /*yield*/, this.publish(data, streamId)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // Publishes data to the stream
    StreamrProxy.prototype.publish = function (data, streamId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.streamrClient.publish(streamId, __assign({}, data))];
                    case 1:
                        _a.sent();
                        logger.info("New data published to the stream: ".concat(streamId));
                        return [2 /*return*/];
                }
            });
        });
    };
    StreamrProxy.prototype.getStreamIdForStreamName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var publicAddress, path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.streamrClient.getUserId()];
                    case 1:
                        publicAddress = _a.sent();
                        path = "/redstone-oracle/".concat(name);
                        return [2 /*return*/, "".concat(publicAddress).concat(path)];
                }
            });
        });
    };
    // This method creates and configures a stream.
    // It enables historical data storage in STREAMR_GERMANY
    // And allows everyone to get the stream and access the stream data
    StreamrProxy.prototype.createStream = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var stream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.streamrClient.createStream({
                            id: id,
                            storageDays: 7,
                            requireEncryptedData: false,
                            requireSignedData: false,
                            inactivityThresholdHours: 24 * 20, // 20 days
                        })];
                    case 1:
                        stream = _a.sent();
                        logger.info("Stream created: ".concat(stream.id));
                        return [4 /*yield*/, stream.addToStorageNode(streamr_client_1.StorageNode.STREAMR_GERMANY)];
                    case 2:
                        _a.sent();
                        logger.info("Stream added to the storage node: STREAMR_GERMANY");
                        return [4 /*yield*/, stream.grantPermission(streamr_client_1.StreamOperation.STREAM_SUBSCRIBE, undefined /* anyone */)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, stream.grantPermission(streamr_client_1.StreamOperation.STREAM_GET, undefined /* anyone */)];
                    case 4:
                        _a.sent();
                        logger.info("Added permissions to the stream: ".concat(stream.id));
                        return [2 /*return*/, stream.id];
                }
            });
        });
    };
    StreamrProxy.prototype.doesStreamExist = function (streamId) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.streamrClient.getStream(streamId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1.toString().includes("NOT_FOUND")) {
                            return [2 /*return*/, false];
                        }
                        else {
                            throw e_1;
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return StreamrProxy;
}());
exports.StreamrProxy = StreamrProxy;
